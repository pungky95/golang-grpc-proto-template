// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package generated

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserInputMultiError, or nil if none found.
func (m *CreateUserInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return CreateUserInputMultiError(errors)
	}

	return nil
}

// CreateUserInputMultiError is an error wrapping multiple validation errors
// returned by CreateUserInput.ValidateAll() if the designated constraints
// aren't met.
type CreateUserInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserInputMultiError) AllErrors() []error { return m }

// CreateUserInputValidationError is the validation error returned by
// CreateUserInput.Validate if the designated constraints aren't met.
type CreateUserInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserInputValidationError) ErrorName() string { return "CreateUserInputValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserInputValidationError{}

// Validate checks the field values on UpdateUserInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInputMultiError, or nil if none found.
func (m *UpdateUserInput) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	if len(errors) > 0 {
		return UpdateUserInputMultiError(errors)
	}

	return nil
}

// UpdateUserInputMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInput.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInputMultiError) AllErrors() []error { return m }

// UpdateUserInputValidationError is the validation error returned by
// UpdateUserInput.Validate if the designated constraints aren't met.
type UpdateUserInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInputValidationError) ErrorName() string { return "UpdateUserInputValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInputValidationError{}

// Validate checks the field values on DetailUserInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DetailUserInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailUserInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailUserInputMultiError, or nil if none found.
func (m *DetailUserInput) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailUserInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DetailUserInputMultiError(errors)
	}

	return nil
}

// DetailUserInputMultiError is an error wrapping multiple validation errors
// returned by DetailUserInput.ValidateAll() if the designated constraints
// aren't met.
type DetailUserInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailUserInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailUserInputMultiError) AllErrors() []error { return m }

// DetailUserInputValidationError is the validation error returned by
// DetailUserInput.Validate if the designated constraints aren't met.
type DetailUserInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailUserInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailUserInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailUserInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailUserInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailUserInputValidationError) ErrorName() string { return "DetailUserInputValidationError" }

// Error satisfies the builtin error interface
func (e DetailUserInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailUserInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailUserInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailUserInputValidationError{}

// Validate checks the field values on DeleteUserInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserInputMultiError, or nil if none found.
func (m *DeleteUserInput) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserInputMultiError(errors)
	}

	return nil
}

// DeleteUserInputMultiError is an error wrapping multiple validation errors
// returned by DeleteUserInput.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserInputMultiError) AllErrors() []error { return m }

// DeleteUserInputValidationError is the validation error returned by
// DeleteUserInput.Validate if the designated constraints aren't met.
type DeleteUserInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserInputValidationError) ErrorName() string { return "DeleteUserInputValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserInputValidationError{}

// Validate checks the field values on ListUserInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserInputMultiError, or
// nil if none found.
func (m *ListUserInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if m.Search != nil {
		// no validation rules for Search
	}

	if len(errors) > 0 {
		return ListUserInputMultiError(errors)
	}

	return nil
}

// ListUserInputMultiError is an error wrapping multiple validation errors
// returned by ListUserInput.ValidateAll() if the designated constraints
// aren't met.
type ListUserInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserInputMultiError) AllErrors() []error { return m }

// ListUserInputValidationError is the validation error returned by
// ListUserInput.Validate if the designated constraints aren't met.
type ListUserInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserInputValidationError) ErrorName() string { return "ListUserInputValidationError" }

// Error satisfies the builtin error interface
func (e ListUserInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserInputValidationError{}

// Validate checks the field values on ListUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserResponseMultiError, or nil if none found.
func (m *ListUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Total

	// no validation rules for TotalPage

	if len(errors) > 0 {
		return ListUserResponseMultiError(errors)
	}

	return nil
}

// ListUserResponseMultiError is an error wrapping multiple validation errors
// returned by ListUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserResponseMultiError) AllErrors() []error { return m }

// ListUserResponseValidationError is the validation error returned by
// ListUserResponse.Validate if the designated constraints aren't met.
type ListUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserResponseValidationError) ErrorName() string { return "ListUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
